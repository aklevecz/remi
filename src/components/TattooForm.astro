---
import LoadingSpinner from "./LoadingSpinner.astro";

const { values } = Astro.props;
---

<tattoo-form>
  <form method="POST" enctype="multipart/form-data">
    <label for="name"
      >Name
      <input autocomplete="name" id="name" name="name" placeholder="Name" value={values.name} required/>
    </label>

    <label for="pronouns"
      >Pronouns
      <input id="pronouns" name="pronouns" placeholder="Pronouns" value={values.pronouns} />
    </label>

    <label for="instagram"
      >Instagram Handle
      <input id="instagram" name="instagram" placeholder="Instagram Handle" value={values.instagram} />
    </label>

    <label for="email"
      >Email
      <input autocomplete="email" id="email" name="email" type="email" placeholder="Email" value={values.email} required/>
    </label>

    <label for="tattoo-description"
      >Tattoo Description (for customs; or specify flash)
      <input
        id="tattoo-description"
        name="tattoo-description"
        placeholder="Tattoo Description"
        value={values.tattooDescription}
        required
      />
    </label>

    <label for="tattoo-placement"
      >Placement of tattoo (could be potential placement or unsure)
      <input
        id="tattoo-placement"
        name="tattoo-placement"
        placeholder="Placement of tattoo"
        value={values.tattooPlacement}
        required
      />
    </label>

    <label for="tattoo-size"
      >Approximate size of tattoo
      <input id="tattoo-size" name="tattoo-size" placeholder="Size of tattoo" value={values.tattooSize} required/>
    </label>

    <label for="tattoo-image">
      Upload an image
      <div class="custom-file-upload">
        <LoadingSpinner id="upload-spinner" visibility="hidden"/>
        <img class="upload-preview hidden" src="" alt="" />
        <button class="cta" disabled style="pointer-events: none;"
          >To upload click here or drag an image from your computer</button
        ><button class="remove-image hidden">Remove image</button>
      </div>
    </label>
    <input id="tattoo-image" name="tattoo-image" type="file" accept="image/*" style="display: none;" />

    <label for="availability"
      >What is your availability? (e.g. typically weekends / after 2pm on tuesdays and thursdays)
      <input id="availability" name="availability" placeholder="Availability" value={values.availability} required/>
    </label>

    <label for="miscellaneous"
      >Anything else you'd like me to know?
      <input id="miscellaneous" name="miscellaneous" placeholder="Miscellaneous" value={values.miscellaneous} />
    </label>
    <!-- <button type="submit"><span class="button-text">Submit</span> <LoadingSpinner id="submit-tattoo" /></button> -->
  </form>
</tattoo-form>

<script>
  class TattooForm extends HTMLElement {
    cta: HTMLSpanElement | null = null;
    removeButton: HTMLButtonElement | null = null;

    imgUploadSpinner: HTMLDivElement | null = null;

    submitButton: HTMLButtonElement | null = null;
    submitText: HTMLSpanElement | null = null;
    submitSpinner: HTMLDivElement | null = null;

    imageInput: HTMLInputElement | null = null;

    constructor() {
      super();
      this.imgUploadSpinner = this.querySelector("#upload-spinner") as HTMLDivElement;
      this.submitButton = this.querySelector("button[type='submit']") as HTMLButtonElement;
      this.submitText = this.querySelector(".button-text") as HTMLSpanElement;
      this.submitSpinner = this.querySelector("#submit-tattoo") as HTMLDivElement;
      this.cta = this.querySelector(".custom-file-upload > .cta") as HTMLSpanElement;
      this.removeButton = this.querySelector(".custom-file-upload > .remove-image") as HTMLButtonElement;
      this.imageInput = this.querySelector("#tattoo-image") as HTMLInputElement;
      this.querySelector("#tattoo-image")!.addEventListener("change", this.uploadImage);
      this.addEventListener("submit", this.submit);

      const customFileUpload = this.querySelector(".custom-file-upload") as HTMLDivElement;

      // Add event listeners for drag and drop
      customFileUpload.addEventListener("dragover", this.dragOver);
      customFileUpload.addEventListener("dragleave", this.dragLeave);
      customFileUpload.addEventListener("drop", this.drop);
    }

    uploadImage = () => {
      this.imgUploadSpinner?.classList.toggle("hidden");
      //   const input = event.target as HTMLInputElement;
      const input = this.imageInput!;

      //   const cta = this.querySelector(".custom-file-upload > span")! as HTMLSpanElement;
      if (input.files!.length > 0) {
        const reader = new FileReader();
        reader.onload = (event: any) => {
          const img = new Image();
          // console.log(img, event.target.result);
          img.src = event.target.result as any;

          img.onload = async () => {
            const canvas = document.createElement("canvas");
            const ctx = canvas.getContext("2d");
            const MAX_WIDTH = 800;
            let width = img.width;
            let height = img.height;

            if (width > MAX_WIDTH) {
              height *= MAX_WIDTH / width;
              width = MAX_WIDTH;
            }

            canvas.width = width;
            canvas.height = height;
            ctx!.drawImage(img, 0, 0, width, height);
            console.log(canvas);
            canvas.toBlob((blob) => {
              let resizedFile = new File([blob!], input.files![0].name, {
                type: "image/jpeg",
                lastModified: Date.now(),
              });
              const formData = new FormData();
              formData.append("file", resizedFile);
              fetch("/img", {
                method: "POST",
                body: formData,
              })
                .then((response) => response.json())
                .then((result) => {
                  this.imgUploadSpinner?.classList.toggle("hidden");
                  this.imageInput!.disabled = true

                  const image = this.querySelector("img.upload-preview") as HTMLImageElement;
                  image.src = reader.result as string;
                  image.classList.remove("hidden");
                  // this.cta!.innerText = "Change Image";
                  this.cta!.innerText = "";
                  //   const removeButton = this.querySelector(".custom-file-upload > button") as HTMLButtonElement;
                  this.removeButton!.classList.remove("hidden");
                  this.removeButton!.addEventListener("click", (e) => {
                    e.preventDefault();
                    // image.classList.add("hidden");
                    console.log(input)
                    this.imageInput!.disabled = false

                    image.classList.add("hidden");
                    input.value = "";
                    this.removeButton!.classList.add("hidden");
                    this.cta!.innerText = "Upload Image";
                  });
                  console.log("Success:", result);
                })
                .catch((error) => {
                  this.imgUploadSpinner?.classList.toggle("hidden");

                  console.error("Error:", error);
                });
              // This file object can now be uploaded
              // ...
            }, "image/jpeg");
          };
        };
        reader.readAsDataURL(input.files![0]);
      }
    };

    toggleSpinner = () => {
      this.submitText!.classList.toggle("hidden");
      this.submitSpinner!.classList.toggle("hidden");
    };

    submit = async (e: SubmitEvent) => {
      // e.preventDefault();
      this.toggleSpinner();
      // window.addEventListener("beforeunload", (event) => {
      //   console.log(event)
      //   event.preventDefault();
      //   event.returnValue = "";
      // });
      // Create a new FormData object from the form
      //   if (e.target) {
      //     // @ts-ignore
      //     const formData = new FormData(e.target);
      //     const res = await fetch("", {
      //       method: "POST",
      //       body: formData,
      //     });
      //     console.log(res);
      //     this.toggleSpinner();
      //   }
    };

    dragOver = (e: DragEvent) => {
      e.preventDefault();
      e.stopPropagation();
    };

    dragLeave = (e: DragEvent) => {
      e.preventDefault();
      e.stopPropagation();
    };

    drop = (e: DragEvent) => {
      e.preventDefault();
      e.stopPropagation();

      // Get the files from the drop event
      const files = e.dataTransfer!.files;

      // If there are any files, set the first one as the input's file
      if (files.length > 0) {
        this.imageInput!.files = files;
        //   this.uploadImage({ target: input });
        this.uploadImage();
      }
    };
  }
  customElements.define("tattoo-form", TattooForm);
</script>
<style>
  form {
    margin-top: 2rem;
  }
  .custom-file-upload {
    margin-top: 0.5rem;
    padding: 10px;
    /* background-color: #f0f0f0; */
    /* border: 1px solid #ccc; */
    border-radius: 5px;
    cursor: pointer;
  }

  .custom-file-upload:hover {
    background-color: var(--secondary-color);
  }

  label {
    display: flex;
    margin: auto;
    flex-direction: column;
    margin-bottom: 2rem;
    max-width: 500px;
    font-size: 1.5rem;
  }
  input {
    background: var(--secondary-color);
    color: var(--primary-color);
    border: none;
    padding: 10px;
    font-size: 1.5rem;
    margin-top: 0.5rem;
  }
  input::placeholder {
    color: white;
    opacity: 0.5;
  }
  button {
    background: var(--secondary-color);
    color: var(--primary-color);
    border: none;
    padding: 12px 30px;
    font-size: 1.55rem;
    border-radius: 50px;
    margin: 2rem auto;
    display: block;
  }
  .upload-preview {
    width: 100%;
    height: auto;
  }
  .hidden {
    display: none;
  }
  .errors {
    color: whitesmoke;
    margin: 1rem auto;
    text-align: center;
  }
</style>
